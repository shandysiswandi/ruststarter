//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub email: String,
    pub full_name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar_url: Option<String>,
    pub status: i16,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mfa_factors::Entity")]
    MfaFactors,
    #[sea_orm(has_many = "super::user_connections::Entity")]
    UserConnections,
    #[sea_orm(has_one = "super::user_credentials::Entity")]
    UserCredentials,
    #[sea_orm(has_many = "super::user_roles::Entity")]
    UserRoles,
}

impl Related<super::mfa_factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MfaFactors.def()
    }
}

impl Related<super::user_connections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserConnections.def()
    }
}

impl Related<super::user_credentials::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCredentials.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_roles::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
